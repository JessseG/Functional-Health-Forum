// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// NextAuth + Prisma (Schema Requirements) ... Start

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String                  @unique
  dobDay                String?
  dobMonth              String?
  dobYear               String?
  emailVerified         DateTime?
  password              String?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  createdAt             DateTime                @default(now()) @map(name: "created_at")
  updatedAt             DateTime                @default(now()) @map(name: "updated_at")
  posts                 Post[]
  post_comments         Post_Comment[]
  post_votes            Post_Vote[]
  protocols             Protocol[]
  protocol_comments     Protocol_Comment[]
  protocol_votes        Protocol_Vote[]
  joinedSubs            Subreddit[]
  Comment_Vote          Comment_Vote[]
  Protocol_Comment_Vote Protocol_Comment_Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// NextAuth + Prisma (Schema Requirements) ... End

model Subreddit {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  displayName String
  infoBoxText String
  createdAt   DateTime   @default(now())
  posts       Post[]
  joinedUsers User[]
  Protocol    Protocol[]
}

model Post {
  id           Int            @id @default(autoincrement())
  title        String
  body         String
  subreddit    Subreddit      @relation(fields: [subredditId], references: [id])
  subredditId  Int
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)  // when user is deleted, posts that user made are cascade-deleted
  userId       String
  comments     Post_Comment[]
  votes        Post_Vote[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Comment_Vote Comment_Vote[]
}

model Post_Comment {
  id        Int            @id @default(autoincrement())
  body      String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  votes     Comment_Vote[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  // parentComment Post_Comment?
}

model Post_Vote {
  id       Int      @id @default(autoincrement())
  voteType VoteType
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
}

model Comment_Vote {
  id        Int          @id @default(autoincrement())
  voteType  VoteType
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  comment   Post_Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model Protocol {
  id                    Int                     @id @default(autoincrement())
  title                 String
  body                  String
  subreddit             Subreddit               @relation(fields: [subredditId], references: [id])
  subredditId           Int
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  comments              Protocol_Comment[]
  votes                 Protocol_Vote[]
  products              Protocol_Product[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  Protocol_Comment_Vote Protocol_Comment_Vote[]
}

model Protocol_Product {
  id         Int       @id @default(autoincrement())
  name       String
  dose       String?
  procedure  String?
  brand      String?
  link       String?
  Protocol   Protocol? @relation(fields: [protocolId], references: [id])
  protocolId Int?
}

model Protocol_Comment {
  id                    Int                     @id @default(autoincrement())
  body                  String
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  protocol              Protocol                @relation(fields: [protocolId], references: [id])
  protocolId            Int
  votes                 Protocol_Vote[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  Protocol_Comment_Vote Protocol_Comment_Vote[]
}

model Protocol_Vote {
  id                 Int               @id @default(autoincrement())
  voteType           VoteType
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  protocol           Protocol          @relation(fields: [protocolId], references: [id])
  protocolId         Int
  Protocol_Comment   Protocol_Comment? @relation(fields: [protocol_CommentId], references: [id])
  protocol_CommentId Int?
}

model Protocol_Comment_Vote {
  id         Int              @id @default(autoincrement())
  voteType   VoteType
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  protocol   Protocol         @relation(fields: [protocolId], references: [id])
  protocolId Int
  comment    Protocol_Comment @relation(fields: [commentId], references: [id])
  commentId  Int
}
